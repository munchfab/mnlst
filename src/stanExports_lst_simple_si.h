// Generated by rstantools.  Do not edit by hand.

/*
    mnlst is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mnlst is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mnlst.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_lst_simple_si_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 114> locations_array__ =
  {" (found before start of program)",
  " (in 'lst_simple_si', line 18, column 2 to column 18)",
  " (in 'lst_simple_si', line 20, column 2 to column 39)",
  " (in 'lst_simple_si', line 22, column 2 to column 20)",
  " (in 'lst_simple_si', line 24, column 2 to column 28)",
  " (in 'lst_simple_si', line 26, column 2 to column 31)",
  " (in 'lst_simple_si', line 28, column 2 to column 31)",
  " (in 'lst_simple_si', line 30, column 2 to column 33)",
  " (in 'lst_simple_si', line 31, column 2 to column 27)",
  " (in 'lst_simple_si', line 32, column 2 to column 15)",
  " (in 'lst_simple_si', line 36, column 2 to column 68)",
  " (in 'lst_simple_si', line 38, column 2 to column 25)",
  " (in 'lst_simple_si', line 46, column 2 to column 29)",
  " (in 'lst_simple_si', line 48, column 2 to column 21)",
  " (in 'lst_simple_si', line 60, column 2 to column 42)",
  " (in 'lst_simple_si', line 62, column 2 to column 42)",
  " (in 'lst_simple_si', line 64, column 2 to column 43)",
  " (in 'lst_simple_si', line 66, column 2 to column 22)",
  " (in 'lst_simple_si', line 92, column 2 to column 32)",
  " (in 'lst_simple_si', line 94, column 2 to column 45)",
  " (in 'lst_simple_si', line 96, column 2 to column 44)",
  " (in 'lst_simple_si', line 104, column 2 to column 55)",
  " (in 'lst_simple_si', line 106, column 2 to column 20)",
  " (in 'lst_simple_si', line 108, column 2 to column 21)",
  " (in 'lst_simple_si', line 114, column 2 to column 21)",
  " (in 'lst_simple_si', line 117, column 2 to column 37)",
  " (in 'lst_simple_si', line 118, column 2 to column 35)",
  " (in 'lst_simple_si', line 40, column 4 to column 23)",
  " (in 'lst_simple_si', line 42, column 6 to column 83)",
  " (in 'lst_simple_si', line 43, column 6 to column 43)",
  " (in 'lst_simple_si', line 41, column 19 to line 44, column 5)",
  " (in 'lst_simple_si', line 41, column 4 to line 44, column 5)",
  " (in 'lst_simple_si', line 39, column 23 to line 45, column 3)",
  " (in 'lst_simple_si', line 39, column 2 to line 45, column 3)",
  " (in 'lst_simple_si', line 51, column 6 to column 30)",
  " (in 'lst_simple_si', line 55, column 8 to column 43)",
  " (in 'lst_simple_si', line 54, column 13 to line 56, column 7)",
  " (in 'lst_simple_si', line 53, column 8 to column 24)",
  " (in 'lst_simple_si', line 52, column 18 to line 54, column 7)",
  " (in 'lst_simple_si', line 52, column 6 to line 56, column 7)",
  " (in 'lst_simple_si', line 50, column 19 to line 57, column 5)",
  " (in 'lst_simple_si', line 50, column 4 to line 57, column 5)",
  " (in 'lst_simple_si', line 49, column 17 to line 58, column 3)",
  " (in 'lst_simple_si', line 49, column 2 to line 58, column 3)",
  " (in 'lst_simple_si', line 68, column 4 to column 49)",
  " (in 'lst_simple_si', line 67, column 17 to line 69, column 3)",
  " (in 'lst_simple_si', line 67, column 2 to line 69, column 3)",
  " (in 'lst_simple_si', line 99, column 6 to column 30)",
  " (in 'lst_simple_si', line 100, column 6 to column 33)",
  " (in 'lst_simple_si', line 98, column 19 to line 101, column 5)",
  " (in 'lst_simple_si', line 98, column 4 to line 101, column 5)",
  " (in 'lst_simple_si', line 97, column 17 to line 102, column 3)",
  " (in 'lst_simple_si', line 97, column 2 to line 102, column 3)",
  " (in 'lst_simple_si', line 110, column 17 to column 71)",
  " (in 'lst_simple_si', line 110, column 2 to column 71)",
  " (in 'lst_simple_si', line 112, column 2 to column 31)",
  " (in 'lst_simple_si', line 115, column 17 to column 79)",
  " (in 'lst_simple_si', line 115, column 2 to column 79)",
  " (in 'lst_simple_si', line 120, column 4 to column 48)",
  " (in 'lst_simple_si', line 121, column 4 to column 42)",
  " (in 'lst_simple_si', line 119, column 17 to line 121, column 43)",
  " (in 'lst_simple_si', line 119, column 2 to line 121, column 43)",
  " (in 'lst_simple_si', line 74, column 17 to column 84)",
  " (in 'lst_simple_si', line 74, column 2 to column 84)",
  " (in 'lst_simple_si', line 75, column 2 to column 36)",
  " (in 'lst_simple_si', line 76, column 2 to column 41)",
  " (in 'lst_simple_si', line 77, column 2 to column 47)",
  " (in 'lst_simple_si', line 79, column 17 to column 75)",
  " (in 'lst_simple_si', line 79, column 2 to column 75)",
  " (in 'lst_simple_si', line 81, column 2 to column 37)",
  " (in 'lst_simple_si', line 83, column 2 to column 47)",
  " (in 'lst_simple_si', line 85, column 2 to column 45)",
  " (in 'lst_simple_si', line 86, column 2 to column 39)",
  " (in 'lst_simple_si', line 87, column 2 to column 49)",
  " (in 'lst_simple_si', line 6, column 2 to column 17)",
  " (in 'lst_simple_si', line 7, column 2 to column 17)",
  " (in 'lst_simple_si', line 8, column 2 to column 17)",
  " (in 'lst_simple_si', line 9, column 2 to column 17)",
  " (in 'lst_simple_si', line 10, column 9 to column 10)",
  " (in 'lst_simple_si', line 10, column 12 to column 13)",
  " (in 'lst_simple_si', line 10, column 2 to column 21)",
  " (in 'lst_simple_si', line 11, column 2 to column 18)",
  " (in 'lst_simple_si', line 12, column 8 to column 9)",
  " (in 'lst_simple_si', line 12, column 2 to column 23)",
  " (in 'lst_simple_si', line 13, column 8 to column 9)",
  " (in 'lst_simple_si', line 13, column 11 to column 23)",
  " (in 'lst_simple_si', line 13, column 2 to column 39)",
  " (in 'lst_simple_si', line 18, column 9 to column 10)",
  " (in 'lst_simple_si', line 20, column 18 to column 23)",
  " (in 'lst_simple_si', line 22, column 9 to column 10)",
  " (in 'lst_simple_si', line 26, column 18 to column 19)",
  " (in 'lst_simple_si', line 28, column 9 to column 20)",
  " (in 'lst_simple_si', line 30, column 23 to column 24)",
  " (in 'lst_simple_si', line 31, column 18 to column 19)",
  " (in 'lst_simple_si', line 32, column 9 to column 10)",
  " (in 'lst_simple_si', line 36, column 22 to column 23)",
  " (in 'lst_simple_si', line 38, column 9 to column 10)",
  " (in 'lst_simple_si', line 38, column 12 to column 13)",
  " (in 'lst_simple_si', line 46, column 9 to column 10)",
  " (in 'lst_simple_si', line 46, column 12 to column 13)",
  " (in 'lst_simple_si', line 48, column 9 to column 10)",
  " (in 'lst_simple_si', line 62, column 9 to column 10)",
  " (in 'lst_simple_si', line 64, column 18 to column 19)",
  " (in 'lst_simple_si', line 66, column 9 to column 10)",
  " (in 'lst_simple_si', line 66, column 12 to column 13)",
  " (in 'lst_simple_si', line 94, column 13 to column 14)",
  " (in 'lst_simple_si', line 96, column 9 to column 10)",
  " (in 'lst_simple_si', line 96, column 12 to column 13)",
  " (in 'lst_simple_si', line 104, column 13 to column 14)",
  " (in 'lst_simple_si', line 106, column 9 to column 10)",
  " (in 'lst_simple_si', line 114, column 9 to column 10)",
  " (in 'lst_simple_si', line 114, column 12 to column 13)",
  " (in 'lst_simple_si', line 117, column 27 to column 28)",
  " (in 'lst_simple_si', line 118, column 27 to column 28)"};
#include <stan_meta_header.hpp>
class model_lst_simple_si final : public model_base_crtp<model_lst_simple_si> {
private:
  int N;
  int O;
  int I;
  int V;
  Eigen::Matrix<double,-1,-1> y_obs_data__;
  int N_mis_tot_y;
  std::vector<int> N_mis_y;
  std::vector<std::vector<int>> pos_mis_y;
  int lambda_t_free_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y_obs{nullptr, 0, 0};
public:
  ~model_lst_simple_si() {}
  model_lst_simple_si(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_lst_simple_si_namespace::model_lst_simple_si";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 74;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 74;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "O", "int",
        std::vector<size_t>{});
      O = std::numeric_limits<int>::min();
      current_statement__ = 75;
      O = context__.vals_i("O")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "O", O, 1);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "I", "int",
        std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      current_statement__ = 76;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "I", I, 1);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "V", "int",
        std::vector<size_t>{});
      V = std::numeric_limits<int>::min();
      current_statement__ = 77;
      V = context__.vals_i("V")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "V", V, 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("y_obs", "N", N);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("y_obs", "V", V);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "y_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(V)});
      y_obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, V,
                       std::numeric_limits<double>::quiet_NaN());
      new (&y_obs)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(y_obs_data__.data(), N, V);
      {
        std::vector<local_scalar_t__> y_obs_flat__;
        current_statement__ = 80;
        y_obs_flat__ = context__.vals_r("y_obs");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
          current_statement__ = 80;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 80;
            stan::model::assign(y_obs, y_obs_flat__[(pos__ - 1)],
              "assigning variable y_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 80;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 81;
      context__.validate_dims("data initialization", "N_mis_tot_y", "int",
        std::vector<size_t>{});
      N_mis_tot_y = std::numeric_limits<int>::min();
      current_statement__ = 81;
      N_mis_tot_y = context__.vals_i("N_mis_tot_y")[(1 - 1)];
      current_statement__ = 82;
      stan::math::validate_non_negative_index("N_mis_y", "V", V);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "N_mis_y", "int",
        std::vector<size_t>{static_cast<size_t>(V)});
      N_mis_y = std::vector<int>(V, std::numeric_limits<int>::min());
      current_statement__ = 83;
      N_mis_y = context__.vals_i("N_mis_y");
      current_statement__ = 84;
      stan::math::validate_non_negative_index("pos_mis_y", "V", V);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("pos_mis_y", "max(N_mis_y)",
        stan::math::max(N_mis_y));
      current_statement__ = 86;
      context__.validate_dims("data initialization", "pos_mis_y", "int",
        std::vector<size_t>{static_cast<size_t>(V),
          static_cast<size_t>(stan::math::max(N_mis_y))});
      pos_mis_y = std::vector<std::vector<int>>(V,
                    std::vector<int>(stan::math::max(N_mis_y),
                      std::numeric_limits<int>::min()));
      {
        std::vector<int> pos_mis_y_flat__;
        current_statement__ = 86;
        pos_mis_y_flat__ = context__.vals_i("pos_mis_y");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= stan::math::max(N_mis_y); ++sym1__) {
          current_statement__ = 86;
          for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
            current_statement__ = 86;
            stan::model::assign(pos_mis_y, pos_mis_y_flat__[(pos__ - 1)],
              "assigning variable pos_mis_y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 86;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 87;
      stan::math::validate_non_negative_index("alpha", "V", V);
      current_statement__ = 88;
      lambda_t_free_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 88;
      lambda_t_free_1dim__ = (V - I);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("lambda_t_free", "V - I",
        lambda_t_free_1dim__);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("trait_z", "N", N);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("sigma_eps", "V", V);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("y_impute", "N_mis_tot_y",
        N_mis_tot_y);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("L_corr", "V", V);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("L_corr", "V", V);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("sigma", "V", V);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("Mu", "V", V);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("L_Sigma", "V", V);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("L_Sigma", "V", V);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("y", "V", V);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("full_data", "N", N);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("full_data", "V", V);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("lambda_t", "V", V);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("trait", "N", N);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("var_eps", "V", V);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("mu_hat", "N", N);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("mu_hat", "V", V);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("THETA", "V", V);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("THETA", "V", V);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("LAMBDA", "V", V);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("LAMBDA", "O", O);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("SIGMA", "V", V);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("SIGMA", "V", V);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("y_rep", "N", N);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("y_rep", "V", V);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("mean_p", "V", V);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("sd_p", "V", V);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = V + lambda_t_free_1dim__ + N + 1 + V + N_mis_tot_y + ((V
      * (V - 1)) / 2) + V + V;
  }
  inline std::string model_name() const final {
    return "model_lst_simple_si";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_lst_simple_si_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(V);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_t_free =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_t_free_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      lambda_t_free = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, lambda_t_free_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> trait_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 3;
      trait_z = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ sigma_trait = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_trait = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_eps =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 5;
      sigma_eps = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, V);
      Eigen::Matrix<local_scalar_t__,-1,1> y_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_mis_tot_y,
          DUMMY_VAR__);
      current_statement__ = 6;
      y_impute = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_mis_tot_y);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_corr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(V, V, DUMMY_VAR__);
      current_statement__ = 7;
      L_corr = in__.template read_constrain_cholesky_factor_corr<
                 Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, V);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, V);
      Eigen::Matrix<local_scalar_t__,-1,1> Mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 9;
      Mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(V);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(V, V, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(L_Sigma,
        stan::math::diag_pre_multiply(sigma, L_corr),
        "assigning variable L_Sigma");
      Eigen::Matrix<local_scalar_t__,-1,-1> y =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, V, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(y, y_obs, "assigning variable y");
      current_statement__ = 33;
      if (stan::math::logical_gt(N_mis_tot_y, 0)) {
        int p_impute_y = std::numeric_limits<int>::min();
        current_statement__ = 27;
        p_impute_y = 1;
        current_statement__ = 31;
        for (int v = 1; v <= V; ++v) {
          current_statement__ = 28;
          stan::model::assign(y,
            stan::math::segment(y_impute, p_impute_y,
              stan::model::rvalue(N_mis_y, "N_mis_y",
                stan::model::index_uni(v))), "assigning variable y",
            stan::model::index_multi(
              stan::model::rvalue(pos_mis_y, "pos_mis_y",
                stan::model::index_uni(v),
                stan::model::index_min_max(1,
                  stan::model::rvalue(N_mis_y, "N_mis_y",
                    stan::model::index_uni(v))))), stan::model::index_uni(v));
          current_statement__ = 29;
          p_impute_y = (p_impute_y +
            stan::model::rvalue(N_mis_y, "N_mis_y", stan::model::index_uni(v)));
        }
      }
      Eigen::Matrix<local_scalar_t__,-1,-1> full_data =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, V, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(full_data, y, "assigning variable full_data");
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 43;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 41;
        for (int o = 1; o <= O; ++o) {
          int v = std::numeric_limits<int>::min();
          current_statement__ = 34;
          v = (((i - 1) * O) + o);
          current_statement__ = 39;
          if (stan::math::logical_eq(o, 1)) {
            current_statement__ = 37;
            stan::model::assign(lambda_t, 1, "assigning variable lambda_t",
              stan::model::index_uni(v));
          } else {
            current_statement__ = 35;
            stan::model::assign(lambda_t,
              stan::model::rvalue(lambda_t_free, "lambda_t_free",
                stan::model::index_uni((v - i))),
              "assigning variable lambda_t", stan::model::index_uni(v));
          }
        }
      }
      local_scalar_t__ var_trait = DUMMY_VAR__;
      current_statement__ = 14;
      var_trait = stan::math::pow(sigma_trait, 2);
      Eigen::Matrix<local_scalar_t__,-1,1> trait =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(trait, stan::math::multiply(trait_z, sigma_trait),
        "assigning variable trait");
      Eigen::Matrix<local_scalar_t__,-1,1> var_eps =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(var_eps, stan::math::pow(sigma_eps, 2),
        "assigning variable var_eps");
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_hat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, V, DUMMY_VAR__);
      current_statement__ = 46;
      for (int v = 1; v <= V; ++v) {
        current_statement__ = 44;
        stan::model::assign(mu_hat,
          stan::math::add(
            stan::model::rvalue(alpha, "alpha", stan::model::index_uni(v)),
            stan::math::multiply(
              stan::model::rvalue(lambda_t, "lambda_t",
                stan::model::index_uni(v)), trait)),
          "assigning variable mu_hat", stan::model::index_omni(),
          stan::model::index_uni(v));
      }
      current_statement__ = 10;
      stan::math::check_cholesky_factor(function__, "L_Sigma", L_Sigma);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "var_trait", var_trait,
        0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "var_eps", var_eps, 0);
      {
        current_statement__ = 63;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 62;
          lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<false>(
                           stan::model::rvalue(full_data, "full_data",
                             stan::model::index_uni(n),
                             stan::model::index_omni()), Mu, L_Sigma));
        }
        current_statement__ = 64;
        lp_accum__.add(stan::math::normal_lpdf<false>(Mu, 0, 10));
        current_statement__ = 65;
        lp_accum__.add(stan::math::lognormal_lpdf<false>(sigma, 0, 5));
        current_statement__ = 66;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<false>(L_corr, 1));
        current_statement__ = 68;
        for (int v = 1; v <= V; ++v) {
          current_statement__ = 67;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_omni(),
                             stan::model::index_uni(v)),
                           stan::model::rvalue(mu_hat, "mu_hat",
                             stan::model::index_omni(),
                             stan::model::index_uni(v)),
                           stan::model::rvalue(sigma_eps, "sigma_eps",
                             stan::model::index_uni(v))));
        }
        current_statement__ = 69;
        lp_accum__.add(stan::math::std_normal_lpdf<false>(trait_z));
        current_statement__ = 70;
        lp_accum__.add(stan::math::lognormal_lpdf<false>(sigma_trait, 0, 1));
        current_statement__ = 71;
        lp_accum__.add(stan::math::lognormal_lpdf<false>(sigma_eps, 0, 1));
        current_statement__ = 72;
        lp_accum__.add(stan::math::normal_lpdf<false>(alpha, 0, 10));
        current_statement__ = 73;
        lp_accum__.add(stan::math::lognormal_lpdf<false>(lambda_t_free, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_lst_simple_si_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(V);
      Eigen::Matrix<double,-1,1> lambda_t_free =
        Eigen::Matrix<double,-1,1>::Constant(lambda_t_free_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      lambda_t_free = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, lambda_t_free_1dim__);
      Eigen::Matrix<double,-1,1> trait_z =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      trait_z = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double sigma_trait = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_trait = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> sigma_eps =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      sigma_eps = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, V);
      Eigen::Matrix<double,-1,1> y_impute =
        Eigen::Matrix<double,-1,1>::Constant(N_mis_tot_y,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      y_impute = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_mis_tot_y);
      Eigen::Matrix<double,-1,-1> L_corr =
        Eigen::Matrix<double,-1,-1>::Constant(V, V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      L_corr = in__.template read_constrain_cholesky_factor_corr<
                 Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, V);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, V);
      Eigen::Matrix<double,-1,1> Mu =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      Mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(V);
      Eigen::Matrix<double,-1,-1> L_Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(V, V,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> y =
        Eigen::Matrix<double,-1,-1>::Constant(N, V,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> full_data =
        Eigen::Matrix<double,-1,-1>::Constant(N, V,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda_t =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      double var_trait = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> trait =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> var_eps =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mu_hat =
        Eigen::Matrix<double,-1,-1>::Constant(N, V,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha);
      out__.write(lambda_t_free);
      out__.write(trait_z);
      out__.write(sigma_trait);
      out__.write(sigma_eps);
      out__.write(y_impute);
      out__.write(L_corr);
      out__.write(sigma);
      out__.write(Mu);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      stan::model::assign(L_Sigma,
        stan::math::diag_pre_multiply(sigma, L_corr),
        "assigning variable L_Sigma");
      current_statement__ = 11;
      stan::model::assign(y, y_obs, "assigning variable y");
      current_statement__ = 33;
      if (stan::math::logical_gt(N_mis_tot_y, 0)) {
        int p_impute_y = std::numeric_limits<int>::min();
        current_statement__ = 27;
        p_impute_y = 1;
        current_statement__ = 31;
        for (int v = 1; v <= V; ++v) {
          current_statement__ = 28;
          stan::model::assign(y,
            stan::math::segment(y_impute, p_impute_y,
              stan::model::rvalue(N_mis_y, "N_mis_y",
                stan::model::index_uni(v))), "assigning variable y",
            stan::model::index_multi(
              stan::model::rvalue(pos_mis_y, "pos_mis_y",
                stan::model::index_uni(v),
                stan::model::index_min_max(1,
                  stan::model::rvalue(N_mis_y, "N_mis_y",
                    stan::model::index_uni(v))))), stan::model::index_uni(v));
          current_statement__ = 29;
          p_impute_y = (p_impute_y +
            stan::model::rvalue(N_mis_y, "N_mis_y", stan::model::index_uni(v)));
        }
      }
      current_statement__ = 12;
      stan::model::assign(full_data, y, "assigning variable full_data");
      current_statement__ = 43;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 41;
        for (int o = 1; o <= O; ++o) {
          int v = std::numeric_limits<int>::min();
          current_statement__ = 34;
          v = (((i - 1) * O) + o);
          current_statement__ = 39;
          if (stan::math::logical_eq(o, 1)) {
            current_statement__ = 37;
            stan::model::assign(lambda_t, 1, "assigning variable lambda_t",
              stan::model::index_uni(v));
          } else {
            current_statement__ = 35;
            stan::model::assign(lambda_t,
              stan::model::rvalue(lambda_t_free, "lambda_t_free",
                stan::model::index_uni((v - i))),
              "assigning variable lambda_t", stan::model::index_uni(v));
          }
        }
      }
      current_statement__ = 14;
      var_trait = stan::math::pow(sigma_trait, 2);
      current_statement__ = 15;
      stan::model::assign(trait, stan::math::multiply(trait_z, sigma_trait),
        "assigning variable trait");
      current_statement__ = 16;
      stan::model::assign(var_eps, stan::math::pow(sigma_eps, 2),
        "assigning variable var_eps");
      current_statement__ = 46;
      for (int v = 1; v <= V; ++v) {
        current_statement__ = 44;
        stan::model::assign(mu_hat,
          stan::math::add(
            stan::model::rvalue(alpha, "alpha", stan::model::index_uni(v)),
            stan::math::multiply(
              stan::model::rvalue(lambda_t, "lambda_t",
                stan::model::index_uni(v)), trait)),
          "assigning variable mu_hat", stan::model::index_omni(),
          stan::model::index_uni(v));
      }
      current_statement__ = 10;
      stan::math::check_cholesky_factor(function__, "L_Sigma", L_Sigma);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "var_trait", var_trait,
        0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "var_eps", var_eps, 0);
      if (emit_transformed_parameters__) {
        out__.write(L_Sigma);
        out__.write(y);
        out__.write(full_data);
        out__.write(lambda_t);
        out__.write(var_trait);
        out__.write(trait);
        out__.write(var_eps);
        out__.write(mu_hat);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double PSI = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      PSI = var_trait;
      Eigen::Matrix<double,-1,-1> THETA =
        Eigen::Matrix<double,-1,-1>::Constant(V, V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      stan::model::assign(THETA, stan::math::diag_matrix(var_eps),
        "assigning variable THETA");
      Eigen::Matrix<double,-1,-1> LAMBDA =
        Eigen::Matrix<double,-1,-1>::Constant(V, O,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      stan::model::assign(LAMBDA, stan::math::rep_matrix(0, V, O),
        "assigning variable LAMBDA");
      current_statement__ = 52;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 50;
        for (int o = 1; o <= O; ++o) {
          int v = std::numeric_limits<int>::min();
          current_statement__ = 47;
          v = (((i - 1) * O) + o);
          current_statement__ = 48;
          stan::model::assign(LAMBDA,
            stan::model::rvalue(lambda_t, "lambda_t",
              stan::model::index_uni(v)), "assigning variable LAMBDA",
            stan::model::index_uni(v), stan::model::index_uni(i));
        }
      }
      Eigen::Matrix<double,-1,-1> SIGMA =
        Eigen::Matrix<double,-1,-1>::Constant(V, V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      stan::model::assign(SIGMA,
        stan::math::add(
          stan::math::multiply(stan::math::multiply(LAMBDA, PSI),
            stan::math::transpose(LAMBDA)), THETA),
        "assigning variable SIGMA");
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double log_lik_total = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 54;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 53;
        stan::model::assign(log_lik,
          stan::math::multi_normal_lpdf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(n),
              stan::model::index_omni()), alpha, SIGMA),
          "assigning variable log_lik", stan::model::index_uni(n));
      }
      current_statement__ = 55;
      log_lik_total = stan::math::sum(log_lik);
      Eigen::Matrix<double,-1,-1> y_rep =
        Eigen::Matrix<double,-1,-1>::Constant(N, V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 57;
      for (int v = 1; v <= V; ++v) {
        current_statement__ = 56;
        stan::model::assign(y_rep,
          stan::math::to_vector(
            stan::math::normal_rng(
              stan::model::rvalue(mu_hat, "mu_hat",
                stan::model::index_omni(), stan::model::index_uni(v)),
              stan::model::rvalue(sigma_eps, "sigma_eps",
                stan::model::index_uni(v)), base_rng__)),
          "assigning variable y_rep", stan::model::index_omni(),
          stan::model::index_uni(v));
      }
      Eigen::Matrix<double,-1,1> mean_p =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sd_p =
        Eigen::Matrix<double,-1,1>::Constant(V,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 61;
      for (int v = 1; v <= V; ++v) {
        current_statement__ = 58;
        stan::model::assign(mean_p,
          stan::math::logical_gt(
            stan::math::mean(
              stan::model::rvalue(y_rep, "y_rep", stan::model::index_omni(),
                stan::model::index_uni(v))),
            stan::math::mean(
              stan::model::rvalue(y, "y", stan::model::index_omni(),
                stan::model::index_uni(v)))), "assigning variable mean_p",
          stan::model::index_uni(v));
        current_statement__ = 59;
        stan::model::assign(sd_p,
          stan::math::logical_gt(
            stan::math::sd(
              stan::model::rvalue(y_rep, "y_rep", stan::model::index_omni(),
                stan::model::index_uni(v))),
            stan::math::sd(
              stan::model::rvalue(y, "y", stan::model::index_omni(),
                stan::model::index_uni(v)))), "assigning variable sd_p",
          stan::model::index_uni(v));
      }
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "PSI", PSI, 0);
      current_statement__ = 19;
      stan::math::check_cov_matrix(function__, "THETA", THETA);
      current_statement__ = 21;
      stan::math::check_cov_matrix(function__, "SIGMA", SIGMA);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "mean_p", mean_p, 0);
      current_statement__ = 25;
      stan::math::check_less_or_equal(function__, "mean_p", mean_p, 1);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "sd_p", sd_p, 0);
      current_statement__ = 26;
      stan::math::check_less_or_equal(function__, "sd_p", sd_p, 1);
      out__.write(PSI);
      out__.write(THETA);
      out__.write(LAMBDA);
      out__.write(SIGMA);
      out__.write(log_lik);
      out__.write(log_lik_total);
      out__.write(y_rep);
      out__.write(mean_p);
      out__.write(sd_p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(V),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_t_free =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_t_free_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(lambda_t_free,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_t_free_1dim__),
        "assigning variable lambda_t_free");
      out__.write_free_lb(0, lambda_t_free);
      Eigen::Matrix<local_scalar_t__,-1,1> trait_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(trait_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable trait_z");
      out__.write(trait_z);
      local_scalar_t__ sigma_trait = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_trait = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_trait);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_eps =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(sigma_eps,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(V),
        "assigning variable sigma_eps");
      out__.write_free_lb(0, sigma_eps);
      Eigen::Matrix<local_scalar_t__,-1,1> y_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_mis_tot_y,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(y_impute,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_mis_tot_y),
        "assigning variable y_impute");
      out__.write(y_impute);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_corr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(V, V, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(L_corr,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(V, V),
        "assigning variable L_corr");
      out__.write_free_cholesky_factor_corr(L_corr);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(V),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> Mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(Mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(V),
        "assigning variable Mu");
      out__.write(Mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(V)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "lambda_t_free",
        "double",
        std::vector<size_t>{static_cast<size_t>(lambda_t_free_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "trait_z",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_trait",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigma_eps",
        "double", std::vector<size_t>{static_cast<size_t>(V)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "y_impute",
        "double", std::vector<size_t>{static_cast<size_t>(N_mis_tot_y)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "L_corr", "double",
        std::vector<size_t>{static_cast<size_t>(V), static_cast<size_t>(V)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(V)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "Mu", "double",
        std::vector<size_t>{static_cast<size_t>(V)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 1;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_t_free =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_t_free_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_t_free_flat__;
        current_statement__ = 2;
        lambda_t_free_flat__ = context__.vals_r("lambda_t_free");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= lambda_t_free_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(lambda_t_free, lambda_t_free_flat__[(pos__ -
            1)], "assigning variable lambda_t_free",
            stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, lambda_t_free);
      Eigen::Matrix<local_scalar_t__,-1,1> trait_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> trait_z_flat__;
        current_statement__ = 3;
        trait_z_flat__ = context__.vals_r("trait_z");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(trait_z, trait_z_flat__[(pos__ - 1)],
            "assigning variable trait_z", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(trait_z);
      local_scalar_t__ sigma_trait = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_trait = context__.vals_r("sigma_trait")[(1 - 1)];
      out__.write_free_lb(0, sigma_trait);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_eps =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_eps_flat__;
        current_statement__ = 5;
        sigma_eps_flat__ = context__.vals_r("sigma_eps");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(sigma_eps, sigma_eps_flat__[(pos__ - 1)],
            "assigning variable sigma_eps", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_eps);
      Eigen::Matrix<local_scalar_t__,-1,1> y_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_mis_tot_y,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> y_impute_flat__;
        current_statement__ = 6;
        y_impute_flat__ = context__.vals_r("y_impute");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N_mis_tot_y; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(y_impute, y_impute_flat__[(pos__ - 1)],
            "assigning variable y_impute", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(y_impute);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_corr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(V, V, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_corr_flat__;
        current_statement__ = 7;
        L_corr_flat__ = context__.vals_r("L_corr");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(L_corr, L_corr_flat__[(pos__ - 1)],
              "assigning variable L_corr", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L_corr);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 8;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> Mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Mu_flat__;
        current_statement__ = 9;
        Mu_flat__ = context__.vals_r("Mu");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(Mu, Mu_flat__[(pos__ - 1)],
            "assigning variable Mu", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(Mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha", "lambda_t_free", "trait_z",
                "sigma_trait", "sigma_eps", "y_impute", "L_corr", "sigma",
                "Mu"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"L_Sigma", "y", "full_data", "lambda_t", "var_trait", "trait",
             "var_eps", "mu_hat"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"PSI", "THETA", "LAMBDA", "SIGMA", "log_lik", "log_lik_total",
             "y_rep", "mean_p", "sd_p"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(V)},
                std::vector<size_t>{static_cast<size_t>(lambda_t_free_1dim__)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(V)},
                std::vector<size_t>{static_cast<size_t>(N_mis_tot_y)},
                std::vector<size_t>{static_cast<size_t>(V),
                  static_cast<size_t>(V)},
                std::vector<size_t>{static_cast<size_t>(V)},
                std::vector<size_t>{static_cast<size_t>(V)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(V),
               static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(V)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(V)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(V),
               static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(V),
               static_cast<size_t>(O)},
             std::vector<size_t>{static_cast<size_t>(V),
               static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(V)},
             std::vector<size_t>{static_cast<size_t>(V)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_t_free_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_t_free" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "trait_z" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_trait");
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_eps" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_mis_tot_y; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
        param_names__.emplace_back(std::string() + "L_corr" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "Mu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "y" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "full_data" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "var_trait");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "trait" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_eps" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "PSI");
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
          param_names__.emplace_back(std::string() + "THETA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= O; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
          param_names__.emplace_back(std::string() + "LAMBDA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
          param_names__.emplace_back(std::string() + "SIGMA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_lik_total");
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_rep" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "mean_p" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_p" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_t_free_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_t_free" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "trait_z" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_trait");
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_eps" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_mis_tot_y; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ((V * (V - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L_corr" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
      param_names__.emplace_back(std::string() + "Mu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= ((((V * (V - 1)) / 2) + V) + ((V - V) *
           V)); ++sym1__) {
        param_names__.emplace_back(std::string() + "L_Sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "y" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "full_data" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "var_trait");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "trait" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_eps" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "PSI");
      for (int sym1__ = 1; sym1__ <= (V + ((V * (V - 1)) / 2)); ++sym1__) {
        param_names__.emplace_back(std::string() + "THETA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= O; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V; ++sym2__) {
          param_names__.emplace_back(std::string() + "LAMBDA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= (V + ((V * (V - 1)) / 2)); ++sym1__) {
        param_names__.emplace_back(std::string() + "SIGMA" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_lik_total");
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_rep" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "mean_p" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= V; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_p" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"lambda_t_free\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_t_free_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"trait_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_trait\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mis_tot_y) + "},\"block\":\"parameters\"},{\"name\":\"L_corr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(V) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"Mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"L_Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(V) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"full_data\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_trait\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"trait\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"PSI\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"THETA\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(V) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"},{\"name\":\"LAMBDA\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(V) + ",\"cols\":" + std::to_string(O) + "},\"block\":\"generated_quantities\"},{\"name\":\"SIGMA\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(V) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_total\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"},{\"name\":\"sd_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"lambda_t_free\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_t_free_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"trait_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_trait\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mis_tot_y) + "},\"block\":\"parameters\"},{\"name\":\"L_corr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((V * (V - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"Mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"parameters\"},{\"name\":\"L_Sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((V * (V - 1)) / 2) + V) + ((V - V) *V))) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"full_data\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_trait\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"trait\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"transformed_parameters\"},{\"name\":\"PSI\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"THETA\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((V + ((V * (V - 1)) /2))) + "},\"block\":\"generated_quantities\"},{\"name\":\"LAMBDA\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(V) + ",\"cols\":" + std::to_string(O) + "},\"block\":\"generated_quantities\"},{\"name\":\"SIGMA\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((V + ((V * (V - 1)) /2))) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_total\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"},{\"name\":\"sd_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((V + lambda_t_free_1dim__) + N) + 1) +
      V) + N_mis_tot_y) + (V * V)) + V) + V);
    const size_t num_transformed = emit_transformed_parameters * (((((((((V *
      V) + (N * V)) + (N * V)) + V) + 1) + N) + V) + (N * V)));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((((1
      + (V * V)) + (V * O)) + (V * V)) + N) + 1) + (N * V)) + V) + V));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((V + lambda_t_free_1dim__) + N) + 1) +
      V) + N_mis_tot_y) + (V * V)) + V) + V);
    const size_t num_transformed = emit_transformed_parameters * (((((((((V *
      V) + (N * V)) + (N * V)) + V) + 1) + N) + V) + (N * V)));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((((1
      + (V * V)) + (V * O)) + (V * V)) + N) + 1) + (N * V)) + V) + V));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_lst_simple_si_namespace::model_lst_simple_si;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_lst_simple_si_namespace::profiles__;
}
#endif
#endif
